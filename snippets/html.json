{
/*
	 // Place your snippets for HTML here. Each snippet is defined under a snippet name and has a prefix, body and 
	 // description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	 // $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the 
	 // same ids are connected.
	 // Example:
	 "Print to console": {
		"prefix": "log",
		"body": [
			"console.log('$1');",
			"$2"
		],
		"description": "Log output to console"
	}
*/
"Native Autonomous Custom Element V1 in HTML": {
		"prefix": "cea-html-v1",
		"description": "Autonomous Custom Element V1 HTML snippet",
		"body": [
			"<template>",
			"  <style>",
			"    :host {",
			"      display: block;",
			"      position: relative;",
			"      box-sizing: border-box;",
			"    }",
			"",
			"    * {",
			"      box-sizing: border-box;",
			"    }",
			"",
			"  </style>",
			"",
			"  $1",
			"",
			"</template>",
			"",
			"<script>",
			"{",
			"  const doc = (document._currentScript || document.currentScript).ownerDocument;",
			"  const template = doc.querySelector('template');",
			"",
			"  window.customElements.define('$2', class $3 extends HTMLElement {",
			"    constructor () {",
			"      super(); // always call super() first in ctor.",
			"",
			"      this.is = '$2';",
			"",
			"      let shadowRoot = this.attachShadow({",
			"        mode: 'open',",
			"      });",
			"      const instance = template.content.cloneNode(true);",
			"",
			"      shadowRoot.appendChild(instance);",
			"    }",
			"",
			"    connectedCallback() {",
			"      $4",
			"    }",
			"",
			"    disconnectedCallback() {",
			"      $5",
			"    }",
			"",
			"    static get observedAttributes() {",
			"      return [",
			"        '$6',",
			"      ];",
			"    }",
			"",
			"    attributeChangedCallback(attrName, oldVal, newVal) {",
			"      $7",
			"    }",
			"    ",
			"  });",
			"}",
			"</script>"
		]
	},

	"Native Extending Custom Element V1 in HTML": {
		"prefix": "cee-html-v1",
		"description": "Extending Custom Element V1 HTML snippet",
		"body": [
			"<template>",
			"  <style>",
			"    :host {",
			"      display: block;",
			"      position: relative;",
			"      box-sizing: border-box;",
			"    }",
			"",
			"    * {",
			"      box-sizing: border-box;",
			"    }",
			"",
			"  </style>",
			"",
			"  $1",
			"",
			"</template>",
			"",
			"<script>",
			"{",
			"  const doc = (document._currentScript || document.currentScript).ownerDocument;",
			"  const template = doc.querySelector('template');",
			"",
			"  window.customElements.define('$2', class $3 extends $4 {",
			"    constructor () {",
			"      super(); // always call super() first in ctor.",
			"",
			"      this.is = '$2';",
			"",
			"      let shadowRoot = this.attachShadow({",
			"        mode: 'open',",
			"      });",
			"      const instance = template.content.cloneNode(true);",
			"",
			"      shadowRoot.appendChild(instance);",
			"    }",
			"",
			"    connectedCallback() {",
			"      $5",
			"    }",
			"",
			"    disconnectedCallback() {",
			"      $6",
			"    }",
			"",
			"    static get observedAttributes() {",
			"      return [",
			"        '$7',",
			"      ];",
			"    }",
			"",
			"    attributeChangedCallback(attrName, oldVal, newVal) {",
			"      $8",
			"    }",
			"    ",
			"  });",
			"}",
			"</script>"
		]
	},

	"Custom Elements v1 whenDefined": {
		"prefix": "ce-wd",
		"description": "whenDefined accepts a custom element's localName and returns a resolved Promise when the custome element is defined.",
		"body": [
			"window.customElements.whenDefined($1)",
			"  .then(() => {",
			"    $2",
			"  })",
			"  .catch(err => err && console.error(err));"
		]
	},

	"Polymer extended Native Autonomous Custom Elements v1": {
		"prefix": "pcea",
		"description": "Polymer.Element which extends Native Autonomous Custom Element v1",
		"body": [
			"<dom-module id=\"$1\">",
			"  <template strip-whitespace>",
			"    <style>",
			"      :host {",
			"        display: block;",
			"        position: relative;",
			"        box-sizing: border-box;",
			"      }",
			"",
			"      * {",
			"        box-sizing: border-box;",
			"      }",
			"",
			"      $2",
			"    </style>",
			"",
			"      $3",
			"  </template>",
			"</dom-module>",
			"",
			"<script>",
			"  class $4 extends Polymer.Element {",
			"    static get is() {",
			"      return '$1';",
			"    }",
			"",
			"    static get properties() {",
			"      return {",
			"        $5",
			"      };",
			"    }",
			"",
			"    static get observers() {",
			"      return [",
			"        $6",
			"      ];",
			"    }",
			"",
			"    static get observedAttributes() {",
			"      return [",
			"        $7",
			"      ];",
			"    }",
			"",
			"    constructor() {",
			"      super();",
			"",
			"      $8",
			"    }",
			"",
			"    connectedCallback() {",
			"      super.connectedCallback();",
			"",
			"      $9",
			"    }",
			"",
			"    disconnectedCallback() {",
			"      super.disconnectedCallback();",
			"",
			"      $10",
			"    }",
			"",
			"    attributeChangedCallback(attrName, oldVal, newVal) {",
			"      super.attributeChangedCallback();",
			"",
			"      $11",
			"    }",
			"  }",
			"",
			"  window.customElements.defiine($4.is, $4);",
			"</script>"
		]
	}
}