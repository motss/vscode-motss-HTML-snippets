{
  "Native Autonomous Custom Element V1 in HTML": {
    "prefix": "cea",
    "description": "Autonomous Custom Element V1 HTML snippet",
    "body": [
      "<template>",
      "  <style>",
      "    :host {",
      "      display: block;",
      "      position: relative;",
      "      box-sizing: border-box;",
      "    }",
      "",
      "    * {",
      "      box-sizing: border-box;",
      "    }$1",
      "  </style>",
      "",
      "  $2",
      "</template>",
      "",
      "<script>",
      "{",
      "  const doc = (document._currentScript || document.currentScript).ownerDocument;",
      "  const template = doc.querySelector('template');",
      "",
      "  window.customElements.define('$3', class $4 extends HTMLElement {",
      "    constructor () {",
      "      super(); // always call super() first in ctor.",
      "",
      "      this.is = '$3';",
      "",
      "      let shadowRoot = this.attachShadow({",
      "        mode: 'open',",
      "      });",
      "      const instance = template.content.cloneNode(true);",
      "",
      "      shadowRoot.appendChild(instance);",
      "    }",
      "",
      "    connectedCallback() {$5",
      "    }",
      "",
      "    disconnectedCallback() {$6",
      "    }",
      "",
      "    static get observedAttributes() {",
      "      return [$7",
      "      ];",
      "    }",
      "",
      "    attributeChangedCallback(attrName, oldVal, newVal) {$8",
      "    }",
      "    ",
      "  });",
      "}",
      "</script>"
    ]
  },

  "Native Extending Custom Element V1 in HTML": {
    "prefix": "cee",
    "description": "Extending Custom Element V1 HTML snippet",
    "body": [
      "<template>",
      "  <style>",
      "    :host {",
      "      display: block;",
      "      position: relative;",
      "      box-sizing: border-box;",
      "    }",
      "",
      "    * {",
      "      box-sizing: border-box;",
      "    }$1",
      "  </style>",
      "",
      "  $2",
      "</template>",
      "",
      "<script>",
      "{",
      "  const doc = (document._currentScript || document.currentScript).ownerDocument;",
      "  const template = doc.querySelector('template');",
      "",
      "  window.customElements.define('$3', class $4 extends $5 {",
      "    constructor () {",
      "      super(); /* always call super() first in ctor. */",
      "",
      "      this.is = '$3';",
      "",
      "      let shadowRoot = this.attachShadow({",
      "        mode: 'open',",
      "      });",
      "      const instance = template.content.cloneNode(true);",
      "",
      "      shadowRoot.appendChild(instance);",
      "    }",
      "",
      "    connectedCallback() {$6",
      "    }",
      "",
      "    disconnectedCallback() {$7",
      "    }",
      "",
      "    static get observedAttributes() {",
      "      return [$8",
      "      ];",
      "    }",
      "",
      "    attributeChangedCallback(attrName, oldVal, newVal) {$9",
      "    }",
      "    ",
      "  });",
      "}",
      "</script>"
    ]
  },

  "Custom Elements v1 whenDefined": {
    "prefix": "wd-ce",
    "description": "whenDefined accepts a custom element's localName and returns a resolved Promise when the custome element is defined.",
    "body": [
      "window.customElements.whenDefined($1)",
      "  .then(() => {$2",
      "  })",
      "  .catch(err => err && console.error(err));"
    ]
  },

  "Polymer extended Native Autonomous Custom Elements v1": {
    "prefix": "pcea",
    "description": "Polymer.Element which extends Native Autonomous Custom Element v1",
    "body": [
      "<link rel=\"import\" href=\"$1\">",
      "",
      "<dom-module id=\"$2\">",
      "  <template strip-whitespace>",
      "    <style>",
      "      :host {",
      "        display: block;",
      "        position: relative;",
      "        box-sizing: border-box;",
      "      }",
      "",
      "      * {",
      "        box-sizing: border-box;",
      "      }$3",
      "    </style>",
      "",
      "    $4",
      "  </template>",
      "</dom-module>",
      "",
      "<script>",
      "  /**",
      "   * `$2`",
      "   *",
      "   *",
      "   * @customElement",
      "   * @polymer",
      "   */",
      "  class $5 extends Polymer.Element {",
      "    static get is() {",
      "      return '$2';",
      "    }",
      "",
      "    static get properties() {",
      "      return {$6",
      "      };",
      "    }",
      "",
      "    static get observers() {",
      "      return [$7",
      "      ];",
      "    }",
      "",
      "    static get observedAttributes() {",
      "      return [$8",
      "      ];",
      "    }",
      "",
      "    constructor() {",
      "      super();$9",
      "    }",
      "",
      "    connectedCallback() {",
      "      super.connectedCallback();$10",
      "    }",
      "",
      "    disconnectedCallback() {",
      "      super.disconnectedCallback();$11",
      "    }",
      "",
      "    attributeChangedCallback(attrName, oldVal, newVal) {",
      "      super.attributeChangedCallback();$12",
      "    }",
      "  }",
      "",
      "  window.customElements.define($5.is, $5);",
      "</script>"
    ]
  },

  "HTML Import element from bower_components": {
    "prefix": "hib",
    "description": "HTML Import elements from the `bower_components` directory where elements are installed at via Bower.",
    "body": [
      "<link rel=\"import\" href=\"$1/bower_components/$2/$2.html\">$3"
    ]
  },

  "HTML Import element from bower_components but different directory name from elemnt's name": {
    "prefix": "hid",
    "description": "HTML Import elements from `bower_components` directory that has different directory name from the element's name",
    "body": [
      "<link rel=\"import\" href=\"$1/bower_components/$2/$3.html\">$4"
    ]
  },

  "Static function": {
    "prefix": "sf",
    "description": "Static function with no parameters needed",
    "body": [
      "static $1() {$2",
      "}$3"
    ]
  },

  "Static function with parameters": {
    "prefix": "sfp",
    "description": "Static function with parameters",
    "body": [
      "static $1($2) {$3",
      "}$4"
    ]
  },

  "Static get function": {
    "prefix": "sfg",
    "description": "Static get function",
    "body": [
      "static get $1() {$2",
      "}"
    ]
  },

  "get function": {
    "prefix": "gf",
    "description": "Get function",
    "body": [
      "get () {$1",
      "}"
    ]
  }
}
