{
/*
	 // Place your snippets for HTML here. Each snippet is defined under a snippet name and has a prefix, body and 
	 // description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	 // $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the 
	 // same ids are connected.
	 // Example:
	 "Print to console": {
		"prefix": "log",
		"body": [
			"console.log('$1');",
			"$2"
		],
		"description": "Log output to console"
	}
*/
"Native Autonomous Custom Element V1 in HTML": {
		"prefix": "cea-html-v1",
		"description": "Autonomous Custom Element V1 HTML snippet",
		"body": [
			"<template>",
			"	<style>",
			"		:host {",
			"			display: block;",
			"			position: relative;",
			"			box-sizing: border-box;",
			"		}",
			"",
			"		* {",
			"			box-sizing: border-box;",
			"		}",
			"",
			"	</style>",
			"",
			"$1",
			"",
			"</template>",
			"",
			"<script>",
			"	const doc = (document._currentScript || document.currentScript).ownerDocument;",
			"	const template = doc.querySelector('template');",
			"",
			" window.customElements.define('$2', class $3 extends HTMLElement {",
			"		constructor () {",
			"			super(); // always call super() first in ctor.",
			"",
			"		 	this.is = '$2';",
			"",
			"		 	let shadowRoot = this.attachShadow({",
			"				mode: 'open',",
			"		 	});",
			"			const instance = template.content.cloneNode(true);",
			"",
			"			shadowRoot.appendChild(instance);",
			"	 	}",
			"",
			"	 	connectedCallback() {",
			"			$4",
			"	 	}",
			"",
			"	 	disconnectedCallback() {",
			"		 	$5",
			"	 	}",
			"",
			"	 	static get observedAttributes() {",
			"		 	return [",
			"				'$6',",
			"		 	];",
			"	 	}",
			"",
			"		attributeChangedCallback(attrName, oldVal, newVal) {",
			"			$7",
			"		}",
			"",
			" });",
			"</script>"
		]
	},

	"Native Extending Custom Element V1 in HTML": {
		"prefix": "cee-html-v1",
		"description": "Extending Custom Element V1 HTML snippet",
		"body": [
			"<template>",
			"	<style>",
			"		:host {",
			"			display: block;",
			"			position: relative;",
			"			box-sizing: border-box;",
			"		}",
			"",
			"		* {",
			"			box-sizing: border-box;",
			"		}",
			"",
			"	</style>",
			"",
			"	$1",
			"",
			"</template>",
			"",
			"<script>",
			"	const doc = (document._currentScript || document.currentScript).ownerDocument;",
			"	const template = doc.querySelector('template');",
			"",
			" window.customElements.define('$2', class $3 extends $4 {",
			"	 constructor () {",
			"		 super(); // always call super() first in ctor.",
			"",
			"		 this.is = '$2';",
			"",
			"		 let shadowRoot = this.attachShadow({",
			"			 mode: 'open',",
			"		 });",
			"		 const instance = template.content.cloneNode(true);",
			"",
			"		 shadowRoot.appendChild(instance);",
			"	 }",
			"",
			"	 connectedCallback() {",
			"		 $5",
			"	 }",
			"",
			"	 disconnectedCallback() {",
			"		 $6",
			"	 }",
			"",
			"	 static get observedAttributes() {",
			"		 return [",
			"			 '$7',",
			"		 ];",
			"	 }",
			"",
			"	 attributeChangedCallback(attrName, oldVal, newVal) {",
			"		 $8",
			"	 }",
			"",
			" });",
			"</script>"
		]
	}
}